/*
 * Copyright (C) 2024 UBPorts Foundation
 *
 * WARNING: This is a generated file. Do not modify directly.
 * Any changes made to this file will be overwritten.
 * 
 * Generated on: 2024-07-26
 * Generated by: TELEports tlparser.py
 * 
 * For any modifications, please edit the source templates and regenerate this file.
 */

#include "qx_td_chat_member_status.h"

QxTdChatMemberStatus::QxTdChatMemberStatus(QObject *parent)
    : QxTdObject(parent)
{
    // Intentionally left empty.
}

QJsonObject QxTdChatMemberStatus::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },

    };
}

void QxTdChatMemberStatus::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdObject::unmarshalJson(json);

    emit dataChanged();
}

QxTdChatMemberStatusCreator::QxTdChatMemberStatusCreator(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_CREATOR);
}

QxTdChatMemberStatusCreator::QxTdChatMemberStatusCreator(QObject *parent, QString customTitle_, bool isAnonymous_, bool isMember_)
    : QxTdChatMemberStatus(parent),
    m_customTitle(customTitle_),
    m_isAnonymous(isAnonymous_),
    m_isMember(isMember_) {
    setType(CHAT_MEMBER_STATUS_CREATOR);
}

QString QxTdChatMemberStatusCreator::customTitle() const {
    return m_customTitle;
}

void QxTdChatMemberStatusCreator::setCustomTitle(QString value) {
    if (m_customTitle != value) {
        m_customTitle = value;
        emit dataChanged();
    }
}

bool QxTdChatMemberStatusCreator::isAnonymous() const {
    return m_isAnonymous;
}

void QxTdChatMemberStatusCreator::setIsAnonymous(bool value) {
    if (m_isAnonymous != value) {
        m_isAnonymous = value;
        emit dataChanged();
    }
}

bool QxTdChatMemberStatusCreator::isMember() const {
    return m_isMember;
}

void QxTdChatMemberStatusCreator::setIsMember(bool value) {
    if (m_isMember != value) {
        m_isMember = value;
        emit dataChanged();
    }
}

QJsonObject QxTdChatMemberStatusCreator::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },
        { "custom_title", m_customTitle },
        { "is_anonymous", m_isAnonymous },
        { "is_member", m_isMember }
    };
}

void QxTdChatMemberStatusCreator::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);
    m_customTitle = json["custom_title"].toString();
    m_isAnonymous = json["is_anonymous"].toBool();
    m_isMember = json["is_member"].toBool();

    emit dataChanged();
}

QxTdChatMemberStatusAdministrator::QxTdChatMemberStatusAdministrator(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_ADMIN);
}

QxTdChatMemberStatusAdministrator::QxTdChatMemberStatusAdministrator(QObject *parent, QString customTitle_, bool canBeEdited_, QxTdChatAdministratorRights* rights_)
    : QxTdChatMemberStatus(parent),
    m_customTitle(customTitle_),
    m_canBeEdited(canBeEdited_),
    m_rights(rights_) {
    setType(CHAT_MEMBER_STATUS_ADMIN);
}

QString QxTdChatMemberStatusAdministrator::customTitle() const {
    return m_customTitle;
}

void QxTdChatMemberStatusAdministrator::setCustomTitle(QString value) {
    if (m_customTitle != value) {
        m_customTitle = value;
        emit dataChanged();
    }
}

bool QxTdChatMemberStatusAdministrator::canBeEdited() const {
    return m_canBeEdited;
}

void QxTdChatMemberStatusAdministrator::setCanBeEdited(bool value) {
    if (m_canBeEdited != value) {
        m_canBeEdited = value;
        emit dataChanged();
    }
}

QxTdChatAdministratorRights* QxTdChatMemberStatusAdministrator::rights() const {
    return m_rights.data();
}

void QxTdChatMemberStatusAdministrator::setRights(QxTdChatAdministratorRights* value) {
    if (m_rights.data() != value) {
        m_rights.reset(value);
        emit dataChanged();
    }
}

QJsonObject QxTdChatMemberStatusAdministrator::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },
        { "custom_title", m_customTitle },
        { "can_be_edited", m_canBeEdited },
        { "rights", m_rights->marshalJson() }
    };
}

void QxTdChatMemberStatusAdministrator::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);
    m_customTitle = json["custom_title"].toString();
    m_canBeEdited = json["can_be_edited"].toBool();
    m_rights.reset(new QxTdChatAdministratorRights(this));
    m_rights->unmarshalJson(json["rights"].toObject());

    emit dataChanged();
}

QxTdChatMemberStatusMember::QxTdChatMemberStatusMember(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_MEMBER);
}

QJsonObject QxTdChatMemberStatusMember::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },

    };
}

void QxTdChatMemberStatusMember::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);

    emit dataChanged();
}

QxTdChatMemberStatusRestricted::QxTdChatMemberStatusRestricted(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_RESTRICTED);
}

QxTdChatMemberStatusRestricted::QxTdChatMemberStatusRestricted(QObject *parent, bool isMember_, qint32 restrictedUntilDate_, QxTdChatPermissions* permissions_)
    : QxTdChatMemberStatus(parent),
    m_isMember(isMember_),
    m_restrictedUntilDate(restrictedUntilDate_),
    m_permissions(permissions_) {
    setType(CHAT_MEMBER_STATUS_RESTRICTED);
}

bool QxTdChatMemberStatusRestricted::isMember() const {
    return m_isMember;
}

void QxTdChatMemberStatusRestricted::setIsMember(bool value) {
    if (m_isMember != value) {
        m_isMember = value;
        emit dataChanged();
    }
}

qint32 QxTdChatMemberStatusRestricted::restrictedUntilDate() const {
    return m_restrictedUntilDate;
}

void QxTdChatMemberStatusRestricted::setRestrictedUntilDate(qint32 value) {
    if (m_restrictedUntilDate != value) {
        m_restrictedUntilDate = value;
        emit dataChanged();
    }
}

QxTdChatPermissions* QxTdChatMemberStatusRestricted::permissions() const {
    return m_permissions.data();
}

void QxTdChatMemberStatusRestricted::setPermissions(QxTdChatPermissions* value) {
    if (m_permissions.data() != value) {
        m_permissions.reset(value);
        emit dataChanged();
    }
}

QJsonObject QxTdChatMemberStatusRestricted::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },
        { "is_member", m_isMember },
        { "restricted_until_date", m_restrictedUntilDate },
        { "permissions", m_permissions->marshalJson() }
    };
}

void QxTdChatMemberStatusRestricted::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);
    m_isMember = json["is_member"].toBool();
    m_restrictedUntilDate = json["restricted_until_date"].toInt();
    m_permissions.reset(new QxTdChatPermissions(this));
    m_permissions->unmarshalJson(json["permissions"].toObject());

    emit dataChanged();
}

QxTdChatMemberStatusLeft::QxTdChatMemberStatusLeft(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_LEFT);
}

QJsonObject QxTdChatMemberStatusLeft::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },

    };
}

void QxTdChatMemberStatusLeft::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);

    emit dataChanged();
}

QxTdChatMemberStatusBanned::QxTdChatMemberStatusBanned(QObject *parent)
    : QxTdChatMemberStatus(parent)
{
    setType(CHAT_MEMBER_STATUS_BANNED);
}

QxTdChatMemberStatusBanned::QxTdChatMemberStatusBanned(QObject *parent, qint32 bannedUntilDate_)
    : QxTdChatMemberStatus(parent),
    m_bannedUntilDate(bannedUntilDate_) {
    setType(CHAT_MEMBER_STATUS_BANNED);
}

qint32 QxTdChatMemberStatusBanned::bannedUntilDate() const {
    return m_bannedUntilDate;
}

void QxTdChatMemberStatusBanned::setBannedUntilDate(qint32 value) {
    if (m_bannedUntilDate != value) {
        m_bannedUntilDate = value;
        emit dataChanged();
    }
}

QJsonObject QxTdChatMemberStatusBanned::marshalJson() {
    return QJsonObject{
        { "@type", QxTdObject::typeString() },
        { "banned_until_date", m_bannedUntilDate }
    };
}

void QxTdChatMemberStatusBanned::unmarshalJson(const QJsonObject &json) {
    QJsonObject jsonObj;
    QJsonArray jsonArray;

    QxTdChatMemberStatus::unmarshalJson(json);
    m_bannedUntilDate = json["banned_until_date"].toInt();

    emit dataChanged();
}

QxTdChatMemberStatus *QxTdChatMemberStatusFactory::create(const QJsonObject &data, QObject *parent)
{
    QxTdChatMemberStatus *result = nullptr;
    const QString type = data["@type"].toString();
    if (type == "chatMemberStatusCreator") {
        result = new QxTdChatMemberStatusCreator(parent);
    } else if (type == "chatMemberStatusAdministrator") {
        result = new QxTdChatMemberStatusAdministrator(parent);
    } else if (type == "chatMemberStatusMember") {
        result = new QxTdChatMemberStatusMember(parent);
    } else if (type == "chatMemberStatusRestricted") {
        result = new QxTdChatMemberStatusRestricted(parent);
    } else if (type == "chatMemberStatusLeft") {
        result = new QxTdChatMemberStatusLeft(parent);
    } else if (type == "chatMemberStatusBanned") {
        result = new QxTdChatMemberStatusBanned(parent);
    }

    if (result) {
        result->unmarshalJson(data);
    }
    return result;
}
