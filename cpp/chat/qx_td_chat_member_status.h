/*
 * Copyright (C) 2024 UBPorts Foundation
 *
 * WARNING: This is a generated file. Do not modify directly.
 * Any changes made to this file will be overwritten.
 * 
 * Generated on: 2024-07-26
 * Generated by: TELEports tlparser.py
 * 
 * For any modifications, please edit the source templates and regenerate this file.
 */

#ifndef QX_TD_CHAT_MEMBER_STATUS_H
#define QX_TD_CHAT_MEMBER_STATUS_H

#include "qx_td_chat_administrator_rights.h"
#include "qx_td_chat_permissions.h"

class QxTdChatMemberStatus : public QxTdObject {
    Q_OBJECT

public:
    explicit QxTdChatMemberStatus(QObject *parent = nullptr);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatus)

signals:
    void dataChanged();

};

class QxTdChatMemberStatusCreator : public QxTdChatMemberStatus {
    Q_OBJECT
    Q_PROPERTY(QString customTitle READ customTitle WRITE setCustomTitle NOTIFY dataChanged)
    Q_PROPERTY(bool isAnonymous READ isAnonymous WRITE setIsAnonymous NOTIFY dataChanged)
    Q_PROPERTY(bool isMember READ isMember WRITE setIsMember NOTIFY dataChanged)
    QML_ELEMENT
public:
    explicit QxTdChatMemberStatusCreator(QObject *parent = nullptr);
    explicit QxTdChatMemberStatusCreator(QObject *parent, QString customTitle_, bool isAnonymous_, bool isMember_);

    QString customTitle() const;
    void setCustomTitle(QString value);
    bool isAnonymous() const;
    void setIsAnonymous(bool value);
    bool isMember() const;
    void setIsMember(bool value);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusCreator)
    QString m_customTitle;
    bool m_isAnonymous;
    bool m_isMember;

signals:
    void dataChanged();

};

class QxTdChatMemberStatusAdministrator : public QxTdChatMemberStatus {
    Q_OBJECT
    Q_PROPERTY(QString customTitle READ customTitle WRITE setCustomTitle NOTIFY dataChanged)
    Q_PROPERTY(bool canBeEdited READ canBeEdited WRITE setCanBeEdited NOTIFY dataChanged)
    Q_PROPERTY(QxTdChatAdministratorRights* rights READ rights WRITE setRights NOTIFY dataChanged)
    QML_ELEMENT
public:
    explicit QxTdChatMemberStatusAdministrator(QObject *parent = nullptr);
    explicit QxTdChatMemberStatusAdministrator(QObject *parent, QString customTitle_, bool canBeEdited_, QxTdChatAdministratorRights* rights_);

    QString customTitle() const;
    void setCustomTitle(QString value);
    bool canBeEdited() const;
    void setCanBeEdited(bool value);
    QxTdChatAdministratorRights* rights() const;
    void setRights(QxTdChatAdministratorRights* value);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusAdministrator)
    QString m_customTitle;
    bool m_canBeEdited;
    QScopedPointer<QxTdChatAdministratorRights> m_rights;

signals:
    void dataChanged();

};

class QxTdChatMemberStatusMember : public QxTdChatMemberStatus {
    Q_OBJECT

public:
    explicit QxTdChatMemberStatusMember(QObject *parent = nullptr);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusMember)

signals:
    void dataChanged();

};
class QxTdChatMemberStatusRestricted : public QxTdChatMemberStatus {
    Q_OBJECT
    Q_PROPERTY(bool isMember READ isMember WRITE setIsMember NOTIFY dataChanged)
    Q_PROPERTY(qint32 restrictedUntilDate READ restrictedUntilDate WRITE setRestrictedUntilDate NOTIFY dataChanged)
    Q_PROPERTY(QxTdChatPermissions* permissions READ permissions WRITE setPermissions NOTIFY dataChanged)
    QML_ELEMENT
public:
    explicit QxTdChatMemberStatusRestricted(QObject *parent = nullptr);
    explicit QxTdChatMemberStatusRestricted(QObject *parent, bool isMember_, qint32 restrictedUntilDate_, QxTdChatPermissions* permissions_);

    bool isMember() const;
    void setIsMember(bool value);
    qint32 restrictedUntilDate() const;
    void setRestrictedUntilDate(qint32 value);
    QxTdChatPermissions* permissions() const;
    void setPermissions(QxTdChatPermissions* value);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusRestricted)
    bool m_isMember;
    qint32 m_restrictedUntilDate;
    QScopedPointer<QxTdChatPermissions> m_permissions;

signals:
    void dataChanged();

};

class QxTdChatMemberStatusLeft : public QxTdChatMemberStatus {
    Q_OBJECT

public:
    explicit QxTdChatMemberStatusLeft(QObject *parent = nullptr);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusLeft)

signals:
    void dataChanged();

};
class QxTdChatMemberStatusBanned : public QxTdChatMemberStatus {
    Q_OBJECT
    Q_PROPERTY(qint32 bannedUntilDate READ bannedUntilDate WRITE setBannedUntilDate NOTIFY dataChanged)
    QML_ELEMENT
public:
    explicit QxTdChatMemberStatusBanned(QObject *parent = nullptr);
    explicit QxTdChatMemberStatusBanned(QObject *parent, qint32 bannedUntilDate_);

    qint32 bannedUntilDate() const;
    void setBannedUntilDate(qint32 value);

    void unmarshalJson(const QJsonObject &json) override;
    QJsonObject marshalJson() override;

private:
    Q_DISABLE_COPY(QxTdChatMemberStatusBanned)
    qint32 m_bannedUntilDate;

signals:
    void dataChanged();

};

struct QxTdChatMemberStatusFactory
{
    static QxTdChatMemberStatus *create(const QJsonObject &data, QObject *parent);
};

#endif // QX_TD_CHAT_MEMBER_STATUS_H
